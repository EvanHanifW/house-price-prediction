# -*- coding: utf-8 -*-
"""Predictive Analytics Kelar!.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13agbcHyeGEhAazOxpa1CnpBIkAUsNydC

# Download and loading dataset
Datset yang digunakan adalah dataset House Price Prediction yang didapatkan dari situs [Kaggle](https://www.kaggle.com/datasets/shree1992/housedata)
"""

from google.colab import files
files.upload()         # expire any previous token(s) and upload recreated token

!rm -r ~/.kaggle
!mkdir ~/.kaggle
!mv ./kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!mkdir data

!kaggle datasets download -d shree1992/housedata

!unzip housedata.zip -d data

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt 
# %matplotlib inline
import seaborn as sns

df = pd.read_csv('/content/data/data.csv')

df

"""Dataset yang kita gunakan memiliki 4600 baris dan 18 kolom

# EDA
"""

df.sample(10)

df.info()

df.nunique()

df.drop(['country', 'statezip', 'date'], axis=1, inplace=True)

"""Drop kolom:
- Date: karena kurang berpengaruh ke model
- Statezip: mempersimpel model dan sudah bisa diwakilkan dengan city
- Country: Karena hanya ada 1 unique value
"""

df.info()

"""Deskripsi Variabel:
- Price: Merepresentasikan harga dalam USD dan merupakan fitur target
- Bedroom: Merepresentasikan jumlah kamar tidur
- Bathroom: Merepresentasikan jumlah kamar mandi
- sqft_living: Merepresentasikan ukuran luas rumah
- sqft_lot: Merepresentasikan ukuran luas tanah
- waterfront: Merepresentasikan akses ke jalur air
"""

df.describe().T

"""# EDA

## Missing value handling
"""

df.isnull().sum()

"""Tidak ada missing value

## Handling outliers
"""

sns.boxplot(x=df['price'])

sns.boxplot(x=df['sqft_above'])

sns.boxplot(x=df['sqft_basement'])

sns.boxplot(x=df['sqft_living'])

sns.boxplot(x=df['sqft_lot'])

"""Terlihat ada outliers di beberapa fitur, kita akan mengatasinya menggunakan metode IQR"""

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1

df_IQR = df[~((df < (Q1 - 1.5*IQR)) | (df > (Q3 + 1.5*IQR))).any(axis=1)]
print(f'size df setelah dilakukan handling outlies dengan IQR {df_IQR.shape}')

"""## Univariate Analysis"""

numerical_ft = df.select_dtypes(include=np.number).columns.tolist()
categorical_ft = df.select_dtypes(include=["object"]).columns.tolist()

numerical_ft

categorical_ft

feature = categorical_ft[0]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
dfs = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(dfs)

"""Drop fitur street karena terlalu banyak unique value"""

df.drop(['street'], axis=1, inplace=True)

feature = categorical_ft[1]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
dfs = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(dfs)

df.hist(bins=50, figsize=(20,15))
plt.show()

"""## Multivariate Analytics"""

cat_features = df.select_dtypes(include='object').columns.to_list()
 
for col in cat_features:
  sns.catplot(x=col, y="price", kind="bar", dodge=False, height = 4, aspect = 3,  data=df, palette="Set3")
  plt.title("Rata-rata 'price' Relatif terhadap - {}".format(col))

sns.pairplot(df, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation = df.corr().round(2)
 
sns.heatmap(data=correlation, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""Drop feature dengan korelasi kecil (|corr| < 0.15)"""

df.head()

"""# Data Preperation

## Encoding fitur kategori
"""

from sklearn.preprocessing import  OneHotEncoder
df = pd.concat([df, pd.get_dummies(df['city'], prefix='city')],axis=1)
df.drop(['city'], axis=1, inplace=True)
df.head()

"""## Dimensi reduksi dengan PCA

Dapat dilihat dari corelation matrix bahwa sqft_living dan sqft_above memiliki korelasi yang cukup tinggi, maka dapat kita lakukan reduksi dimensi dengan PCA
"""

sns.pairplot(df[['sqft_above','sqft_living']], plot_kws={"s": 3});

from sklearn.decomposition import PCA
 
pca = PCA(n_components=2, random_state=41004)
pca.fit(df[['sqft_above','sqft_living']])
princ_comp = pca.transform(df[['sqft_above','sqft_living']])

pca.explained_variance_ratio_.round(3)

from sklearn.decomposition import PCA
pca = PCA(n_components=1, random_state=41004)
pca.fit(df[['sqft_living','sqft_above']])
df['sqft'] = pca.transform(df.loc[:, ('sqft_living','sqft_above')]).flatten()
df.drop(['sqft_living','sqft_above'], axis=1, inplace=True)
df

"""## Train test split"""

df.shape

from sklearn.model_selection import train_test_split
 
X = df.drop(["price"],axis =1)
y = df["price"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 41004)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""## Standarisasi"""

df.info()

from sklearn.preprocessing import StandardScaler
 
numerical_features = ['bedrooms', 'bathrooms', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'sqft', 'sqft_basement', 'yr_built', 'yr_renovated']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

"""# Model Development"""

models = pd.DataFrame(index=['KNN', 'SVR', 'RandomForest', 'Boosting'],
                      columns=['train_mse', 'test_mse'])

from sklearn.metrics import mean_squared_error
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import AdaBoostRegressor

"""## SVR"""

svr = SVR()
svr.fit(X_train,y_train)

models.loc['SVR','train_mse'] = mean_squared_error(y_true=y_train, y_pred=svr.predict(X_train))/1e3
models.loc['SVR','test_mse'] = mean_squared_error(y_true=y_test, y_pred=svr.predict(X_test))/1e3

"""## KNN"""

knn = KNeighborsRegressor()
knn.fit(X_train, y_train)
 
models.loc['KNN','train_mse'] = mean_squared_error(y_true=y_train, y_pred=knn.predict(X_train))/1e3
models.loc['KNN','test_mse'] = mean_squared_error(y_true=y_test, y_pred=knn.predict(X_test))/1e3

"""## Random Forest"""

randomforest = RandomForestRegressor()
randomforest.fit(X_train, y_train)
 
models.loc['RandomForest','train_mse'] = mean_squared_error(y_true=y_train, y_pred=randomforest.predict(X_train))/1e3
models.loc['RandomForest','test_mse'] = mean_squared_error(y_true=y_test, y_pred=randomforest.predict(X_test))/1e3

"""## Boosting"""

boosting = AdaBoostRegressor()                             
boosting.fit(X_train, y_train)

models.loc['Boosting','train_mse'] = mean_squared_error(y_true=y_train, y_pred=boosting.predict(X_train))/1e3
models.loc['Boosting','test_mse'] = mean_squared_error(y_true=y_test, y_pred=boosting.predict(X_test))/1e3

"""## MAE Score"""

models

fig, ax = plt.subplots()
models.sort_values(by='test_mse', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""## Predict"""

prediksi = X_test.iloc[100:110].copy()
pred_dict = {'y_true':y_test[100:110]}
model_dict = {'KNN': knn, 'RandomForest': randomforest, 'Boosting': boosting, 'SVR': svr}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)

